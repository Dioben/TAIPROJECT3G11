import argparse
import pandas as pd
import plotly.express as px
import os


def full(df, output):
    fig = px.scatter_3d(df,
        x = "noise",
        y = "size",
        color = "compressor",
        z = "correct",
        title = "Percentage of correctly found songs",
        labels = {"size": "Size (s)", "noise": "Noise", "compressor": "Compressor", "correct": "Correct (%)"})
    try:
        os.makedirs(os.path.dirname(output), exist_ok=True)
    except:
        pass
    fig.write_html(output)


def size(df, output, size):
    fig = px.line(df.loc[df["size"] == size],
        x = "noise",
        color = "compressor",
        y = "correct",
        title = f"Percentage of correctly found songs with size={size}s",
        labels = {"noise": "Noise", "compressor": "Compressor", "correct": "Correct (%)"},
        markers = True)
    try:
        os.makedirs(os.path.dirname(output), exist_ok=True)
    except:
        pass
    fig.write_html(output)


def noise(df, output, noise):
    fig = px.line(df.loc[df["noise"] == noise],
        x = "size",
        color = "compressor",
        y = "correct",
        title = f"Percentage of correctly found songs with noise={noise}",
        labels = {"size": "Size (s)", "compressor": "Compressor", "correct": "Correct (%)"},
        markers = True)
    try:
        os.makedirs(os.path.dirname(output), exist_ok=True)
    except:
        pass
    fig.write_html(output)


def main(args):
    df = pd.read_csv(args.data, delimiter="\t")
    df = df.groupby(["compressor", "size", "noise"]).apply(lambda x: x["correct"].sum()/len(x)*100).reset_index()
    df.columns = ["compressor", "size", "noise", "correct"]
    df["size"] = df["size"].apply(str)
    df["noise"] = df["noise"].apply(str)
    full(df, f"{args.full_prefix}.html")
    size(df, f"{args.size_prefix}.html", str(args.size))
    noise(df, f"{args.noise_prefix}.html", str(args.noise))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--data", help="File with the data for the graphs (generated by datagen.py)", required=True)
    parser.add_argument("--full-prefix", help="File prefix to output the full graph", required=True)
    parser.add_argument("--size-prefix", help="File prefix to output the size graph", required=True)
    parser.add_argument("--noise-prefix", help="File prefix to output the noise graph", required=True)
    parser.add_argument("--size", help="Size to use for the size graph", default=1)
    parser.add_argument("--noise", help="Noise to use for the noise graph", default=0.5)
    args = parser.parse_args()
    main(args)