import argparse
import pandas as pd
import plotly.express as px
import os


def getDf(filename):
    df = pd.read_csv(filename, delimiter="\t")
    df["size"] = df["size"].apply(str)
    df["noise"] = df["noise"].apply(str)
    df.insert(3, "sizeStr", "")
    df.loc[df["size"] == "1", "sizeStr"] = "  1s"
    df.loc[df["size"] == "5", "sizeStr"] = "  5s"
    df.loc[df["size"] == "10", "sizeStr"] = " 10s"
    df.loc[df["size"] == "20", "sizeStr"] = " 20s"
    df.loc[df["size"] == "30", "sizeStr"] = " 30s"
    df.loc[df["size"] == "9/10", "sizeStr"] = " 90%"
    df.loc[df["size"] == "full", "sizeStr"] = "100%"
    df = df.groupby(["compressor", "size", "sizeStr", "noise"]).apply(lambda x: x["correct"].sum()/len(x)).reset_index()
    df.columns = ["compressor", "size", "sizeStr", "noise", "correct"]
    df = df.sort_values(["sizeStr", "noise"])
    return df


def full(df, output, title, correctLabel, fixedSize):
    fig = px.scatter_3d(df,
        x = "noise",
        y = "sizeStr",
        color = "compressor",
        z = "correct",
        title = title,
        labels = {"sizeStr": "Size", "noise": "Noise", "compressor": "Compressor", "correct": correctLabel})
    fig.update_layout(scene_camera_eye=dict(x=1.5, y=0, z=1.7))
    if fixedSize:
        fig.update_layout(width=600,height=600)
    try:
        os.makedirs(os.path.dirname(output), exist_ok=True)
    except:
        pass
    fig.write_html(output)


def size(df, output, title, correctLabel, fixedSize):
    fig = px.line(df,
        x = "noise",
        color = "compressor",
        y = "correct",
        title = title,
        labels = {"noise": "Noise", "compressor": "Compressor", "correct": correctLabel},
        markers = True)
    if fixedSize:
        fig.update_layout(width=600,height=600)
    try:
        os.makedirs(os.path.dirname(output), exist_ok=True)
    except:
        pass
    fig.write_html(output)


def noise(df, output, title, correctLabel, fixedSize):
    fig = px.line(df,
        x = "sizeStr",
        color = "compressor",
        y = "correct",
        title = title,
        labels = {"sizeStr": "Size", "compressor": "Compressor", "correct": correctLabel},
        markers = True)
    if fixedSize:
        fig.update_layout(width=600,height=600)
    try:
        os.makedirs(os.path.dirname(output), exist_ok=True)
    except:
        pass
    fig.write_html(output)


def main(args):
    # Graphs with how correct the songs found are
    df = getDf(args.data)
    df["correct"] = df["correct"]*100
    full(df,
        f"{args.full_prefix}.html",
        "Percentage of correctly found songs",
        "Correct (%)",
        args.fixed_size)
    size(df.loc[df["size"] == str(args.size)],
        f"{args.size_prefix}.html",
        f"Percentage of correctly found songs with size={df.loc[df['size'] == str(args.size)].sizeStr.unique()[0].strip()}",
        "Correct (%)",
        args.fixed_size)
    noise(df.loc[df["noise"] == str(args.noise)],
        f"{args.noise_prefix}.html",
        f"Percentage of correctly found songs with noise={args.noise}",
        "Correct (%)",
        args.fixed_size)
    
    # Graphs that show if similar songs are found (classical genre only)
    df = getDf(args.classical_data)
    full(df,
        f"{args.full_prefix}Classical.html",
        "Average number of classical songs found in the top 4 results",
        "Songs",
        args.fixed_size)
    size(df.loc[df["size"] == str(args.size)],
        f"{args.size_prefix}Classical.html",
        f"Average number of classical songs found in the top 4 results with size={df.loc[df['size'] == str(args.size)].sizeStr.unique()[0].strip()}",
        "Songs",
        args.fixed_size)
    noise(df.loc[df["noise"] == str(args.noise)],
        f"{args.noise_prefix}Classical.html",
        f"Average number of classical songs found in the top 4 results with noise={args.noise}",
        "Songs",
        args.fixed_size)
    
    


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--data", help="File with data for the graphs (generated by datagen.py)", required=True)
    parser.add_argument("--classical-data", help="File with data for the graphs (generated by datagen.py)", required=True)
    parser.add_argument("--full-prefix", help="File prefix to output the full graph", required=True)
    parser.add_argument("--size-prefix", help="File prefix to output the size graph", required=True)
    parser.add_argument("--noise-prefix", help="File prefix to output the noise graph", required=True)
    parser.add_argument("--size", help="Size to use for the size graph", default="1")
    parser.add_argument("--noise", help="Noise to use for the noise graph", default=0.1)
    parser.add_argument("--fixed-size",dest="fixed_size",help="Make graphs have a fixed 600x600 size",action="store_true")
    parser.set_defaults(fixed_size=False)
    args = parser.parse_args()
    main(args)