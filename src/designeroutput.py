# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'finderUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import os
import threading
import subprocess
from commonutils import calculateDistance

class Ui_MainWindow(object):
    def setupUi(self, MainWindow,comp,db,cache): #caching is not implemented yet

        #state management
        self.tempfilename = "./tempfile"
        tempfilenum = 0
        while os.path.exists(f"{self.tempfilename}{tempfilenum}.freqs"):
            tempfilenum+=1
        self.tempfilename+=str(tempfilenum)+".freqs"
        self.running = False
        self.compress = comp
        self.db = db



        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(783, 629)
        MainWindow.setMaximumSize(QtCore.QSize(783, 629))
        MainWindow.setMinimumSize(QtCore.QSize(783, 629))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget_8 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_8.setGeometry(QtCore.QRect(-10, 0, 811, 601))
        self.horizontalLayoutWidget_8.setObjectName("horizontalLayoutWidget_8")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_8)
        self.horizontalLayout_13.setContentsMargins(30, 20, 30, 10)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.splitter = QtWidgets.QSplitter(self.horizontalLayoutWidget_8)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.horizontalWidget_5 = QtWidgets.QWidget(self.splitter)
        self.horizontalWidget_5.setMaximumSize(QtCore.QSize(16777215, 50))
        self.horizontalWidget_5.setObjectName("horizontalWidget_5")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.horizontalWidget_5)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem)
        self.filename_label = QtWidgets.QLabel(self.horizontalWidget_5)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.filename_label.setFont(font)
        self.filename_label.setText("")
        self.filename_label.setAlignment(QtCore.Qt.AlignCenter)
        self.filename_label.setWordWrap(True)
        self.filename_label.setObjectName("filename_label")
        self.horizontalLayout_7.addWidget(self.filename_label)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem1)
        self.progressBarContainer = QtWidgets.QWidget(self.splitter)
        self.progressBarContainer.setMaximumSize(QtCore.QSize(16777215, 50))
        self.progressBarContainer.setObjectName("progressBarContainer")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.progressBarContainer)
        self.horizontalLayout.setContentsMargins(40, 1, 40, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.progressBar = QtWidgets.QProgressBar(self.progressBarContainer)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.horizontalLayout.addWidget(self.progressBar)
        self.cancel = QtWidgets.QPushButton(self.progressBarContainer)
        self.cancel.setObjectName("cancel")
        self.horizontalLayout.addWidget(self.cancel)
        self.frame = QtWidgets.QFrame(self.splitter)
        self.setAcceptDrops(True)
        self.frame.setAcceptDrops(True)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setLineWidth(10)
        self.frame.setObjectName("frame")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.frame)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, 90, 751, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(88, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.submitbutton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.submitbutton.setObjectName("submitbutton")
        self.horizontalLayout_2.addWidget(self.submitbutton)
        spacerItem3 = QtWidgets.QSpacerItem(88, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.frame)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(2, 20, 751, 80))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem5)
        self.frame_2 = QtWidgets.QFrame(self.splitter)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.frame_2)
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 0, 751, 259))
        self.tableWidget_2.setMinimumSize(QtCore.QSize(0, 200))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(2)
        self.tableWidget_2.setRowCount(0)
        self.horizontalLayout_13.addWidget(self.splitter)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        #custom code stuff
        self.progressBarContainer.setVisible(False)
        self.frame.dragEnterEvent = lambda s: self.frameEnterEvent(s)
        self.frame.dropEvent = lambda s: self.frameDropEvent(s)
        self.cancel.clicked.connect(self.cancelThreadVisualReset)
        self.tableWidget_2.setHorizontalHeaderLabels(["File","Similarity"])
        self.submitbutton.clicked.connect(self.fileSelectPress)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Media Finder"))
        self.cancel.setText(_translate("MainWindow", "Cancel"))
        self.submitbutton.setText(_translate("MainWindow", "Or Click Here"))
        self.label.setText(_translate("MainWindow", "Drop Wav Files Here"))

    
    def frameEnterEvent(self, event):
        self.frame.setStyleSheet("QFrame#frame {border : 5px double lightblue;}")
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()


    def frameDropEvent(self, event):
        self.frame.setStyleSheet("")
        files = [u.url() for u in event.mimeData().urls()]
        if len(files)!=1:
            self.filename_label.setText("1 file at a time please")
        filename = files[0]
        filename = filename[6:]
        self.filename_label.setText(f"Processing results for {filename.split('/')[-1]}")
        self.progressBarContainer.setVisible(True)
        self.progressBar.setValue(0)
        self.frame.setVisible(False)
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 0, 751, 469))
        threading.Thread(target=self.processFile,args=(filename,),daemon=True).start()
        

    def dragEnterEvent(self,event):
        self.frame.setStyleSheet("QFrame#frame {border : 5px double lightblue;}")
        event.accept()

    def dragLeaveEvent(self,event):
        self.frame.setStyleSheet("")
        event.ignore()

    def dropEvent(self, event):
        self.frame.setStyleSheet("")
        event.ignore()

    def fillTable(self,list):
        self.tableWidget_2.setRowCount(0)
        self.tableWidget_2.setRowCount(len(list))
        for idx,x in enumerate(list):
            self.tableWidget_2.setItem(idx,0,x[0])
            self.tableWidget_2.setItem(idx,1,x[1])

    def processFile(self,filename):
        self.running = True
        cmd = ["./GetMaxFreqs", "-w", self.tempfilename, filename]
        popen = subprocess.Popen(cmd)
        popen.wait()
        if not self.running:
            return
        with open(self.tempfilename, "rb") as f:
            trans = f.read()
        if not self.running:
            return
        results = []
        filelist = os.listdir(self.db)
        totalfiles = len(filelist)
        counter = 0
        for f in filelist:
            keyname = f.removesuffix(".fft")
            fullpath = f"{self.db}/{f}"
            with open(fullpath,"rb") as tmpfile:
                modelbytes = tmpfile.read()
            results.append( (keyname, calculateDistance(trans,modelbytes,self.compress) ))
            counter+=1
            self.progressBar.setValue(counter/totalfiles*100)
            if not self.running:
                return
            results  = sorted(results,key=lambda x: x[1],reverse=True)[:10]
            self.fillTable(results)
        
        self.filename_label.setText(f"Results for {filename.split('/')[-1]}")
        self.progressBarContainer.setVisible(False)
        self.frame.setVisible(True)
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 0, 751, 259))
        return

    def cancelThreadVisualReset(self):
        self.running = False
        self.progressBarContainer.setVisible(False)
        self.frame.setVisible(True)
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 0, 751, 259))


    def fileSelectPress(self):
        file , check = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()",
                                               "Select Sound Source", "All Files (*);;Wav Files (*.wav)")
        if check:
            self.filename_label.setText(f"Processing results for {file.split('/')[-1]}")
            self.progressBarContainer.setVisible(True)
            self.progressBar.setValue(0)
            self.frame.setVisible(False)
            self.tableWidget_2.setGeometry(QtCore.QRect(0, 0, 751, 469))
            threading.Thread(target=self.processFile,args=(file,),daemon=True).start()